/* Global Mixins Stylesheet */
@function rem-calc($fontSize, $fontCurrent: $rem-base) {
  @if (unitless($fontSize)) {
    $fontSize: $fontSize * 1px;
  }
  @if (unitless($fontCurrent)) {
    $fontCurrent: $fontCurrent * 1px;
  }
  @return (calc($fontSize / $fontCurrent) * 1px);
}

@function em-calc($fontSize, $fontCurrent: $em-base) {
  @if (unitless($fontSize)) {
    $fontSize: $fontSize * 1px;
  }
  @if (unitless($fontCurrent)) {
    $fontCurrent: $fontCurrent * 1px;
  }
  @return (calc($fontSize / $fontCurrent) * 1em);
}

// Font Face
@mixin font-face($name, $file) {
  $eot: false;
  $ttf: false;
  $svg: false;
  @font-face {
    font-family: "#{$name}";
    @if $eot {
      src: url("../fonts/#{$file}.eot");
      src: url("../fonts/#{$file}.eot?#iefix") format("embedded-opentype");
    }
    @if $ttf {
      src: url("../fonts/#{$file}.ttf") format("truetype");
    }
    @if $svg {
      src: url("../fonts/#{$file}.svg?#webfont") format("svg");
    }
    src: url("../fonts/#{$file}.woff") format("woff"),
    url("../fonts/#{$file}.woff2") format("woff2");
  }
}

// Rentina Image Detect for use
@mixin retina-image($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

// Set aspect ratio (ex: 4:3, 16:9) for element.
@mixin aspect-ratio($width, $height, $element: null) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: calc($height / $width) * 100%;
  }
  @if not $element {
    > div {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
  } @else {
    > .#{$element} {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
  }
}

// Element Center
@mixin center($name: null, $value: 50%) {
  display: inline-block;
  margin: 0 auto;
  @if ($name == 'x') {
    top: 0;
    left: $value;
    transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
  } @else if ($name == 'y') {
    top: $value;
    left: 0;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
  } @else {
    top: $value;
    left: $value;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
  }
}

@mixin container($min: $mobile, $max: $desktop) {
  min-width: em-calc($min);
  max-width: em-calc($max);
  width: 100%;
  @include center();
}

@mixin word-wrap() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin padding-rem($top: 0, $right: 0, $bottom: 0, $left: 0) {
  padding-top: rem-calc($top);
  padding-right: rem-calc($right);
  padding-bottom: rem-calc($bottom);
  padding-left: rem-calc($left);
}

@mixin margin-rem($top: 0, $right: 0, $bottom: 0, $left: 0) {
  margin-top: rem-calc($top);
  margin-right: rem-calc($right);
  margin-bottom: rem-calc($bottom);
  margin-left: rem-calc($left);
}

@mixin padding-em($top: 0, $right: 0, $bottom: 0, $left: 0) {
  padding-top: em-calc($top);
  padding-right: em-calc($right);
  padding-bottom: em-calc($bottom);
  padding-left: em-calc($left);
}

@mixin margin-em($top: 0, $right: 0, $bottom: 0, $left: 0) {
  margin-top: em-calc($top);
  margin-right: em-calc($right);
  margin-bottom: em-calc($bottom);
  margin-left: em-calc($left);
}

@mixin absolute-center($width: null, $height: null) {
  position: absolute;
  top: 50%;
  left: 50%;
  @if not $width and not $height {
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
  } @else if $width and $height {
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2);
  } @else if not $height {
    width: $width;
    margin-left: -($width / 2);
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
  } @else {
    height: $height;
    margin-top: -($height / 2);
    transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
  }
}

@mixin radius-rem($top-left: 0, $top-right: 0, $bottom-left: 0, $bottom-right: 0) {
  border-top-left-radius: rem-calc($top-left);
  border-top-right-radius: rem-calc($top-right);
  border-bottom-left-radius: rem-calc($bottom-left);
  border-bottom-right-radius: rem-calc($bottom-right);
}

@mixin radius-em($top-left: 0, $top-right: 0, $bottom-left: 0, $bottom-right: 0) {
  border-top-left-radius: em-calc($top-left);
  border-top-right-radius: em-calc($top-right);
  border-bottom-left-radius: em-calc($bottom-left);
  border-bottom-right-radius: em-calc($bottom-right);
}

@mixin transition($transition...) {
  -moz-transition: $transition;
  -o-transition: $transition;
  -webkit-transition: $transition;
  transition: $transition;
}

@mixin transition-property($property...) {
  -moz-transition-property: $property;
  -o-transition-property: $property;
  -webkit-transition-property: $property;
  transition-property: $property;
}

@mixin transition-duration($duration...) {
  -moz-transition-property: $duration;
  -o-transition-property: $duration;
  -webkit-transition-property: $duration;
  transition-property: $duration;
}

@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function: $timing;
  -o-transition-timing-function: $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
  -moz-transition-delay: $delay;
  -o-transition-delay: $delay;
  -webkit-transition-delay: $delay;
  transition-delay: $delay;
}

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin createCarousel($carousel, $prefix, $num) {
  @for $i from 1 through $num {
    ##{$prefix} {
      &-#{$carousel}-slide#{$i}:checked
      ~ .#{$prefix}-slider-content [data-slide="#{$i}"] {
        // transform: translateX(0); 
        opacity: 1;
      }

      &-#{$carousel}-slide#{$i}:checked
      ~ .#{$prefix}-slider-dots label[for="#{$prefix}-#{$carousel}-slide#{$i}"] {
        background: rgba(0, 0, 0, 1);
      }

      &-#{$carousel}-slide#{$i}:checked
      ~ .#{$prefix}-slider-arrow label[data-type="next"][for="#{$prefix}-#{$carousel}-slide#{$i}"] + label {
        z-index: 4;
      }

      &-#{$carousel}-slide#{$i}:checked
      ~ .#{$prefix}-slider-arrow label[data-type="next"][for="#{$prefix}-#{$carousel}-slide#{$i}"]:last-of-type {
        z-index: 2;
      }

      &-#{$carousel}-slide#{$i}:checked
      ~ .#{$prefix}-slider-arrow label[data-type="prev"][for="#{$prefix}-#{$carousel}-slide#{$i}"],
      &-#{$carousel}-slide#{$i}:checked
      ~ .#{$prefix}-slider-arrow label[data-type="prev"][for="#{$prefix}-#{$carousel}-slide#{$i}"]
      ~ label[data-type="prev"] {
        z-index: 2;
      }
    }
  }
}

@mixin createTab($tab, $prefix, $num) {
  @for $i from 1 through $num {
    &[id="#{$prefix}-#{$tab}-tab#{$i}"]:checked {
      & ~ {
        .#{$prefix} {
          &-labels {
            & label[for="#{$prefix}-#{$tab}-tab#{$i}"] {
              color: rgba($black, 1);

              & span {
                border: 1px solid rgba($black, 0.25);

                &::before {
                  background-color: rgba(red, 0.5);
                }
              }
            }
          }

          &-panels {
            & > div[data-id="#{$i}"] { display: block }
          }
        }
      }
    }
  }
}

@mixin createPlusIcon($num) {
  @for $i from 1 through $num {
    &[data-id="O#{$i}"] {
      &:checked {
        & ~ .#{$prefix} {
          &-plus {
            &-group {
              &[data-id="#{$i}"] {
                box-shadow: 0 em-calc(1) em-calc(2) rgba($black, 1);

                &:before {
                  transform-origin: center;
                  transform: rotate(135deg);
                  color: rgba($black, 1);
                }

                & .#{$prefix} {
                  &-plus {
                    &-content {
                      height: auto;
                      visibility: visible;
                      opacity: 1;
                    }
                  }
                }

                & label {
                  &[data-name="O#{$i}"] { display: none; }

                  &[data-name="C#{$i}"] { display: flex; }
                }
              }
            }
          }
        }
      }
    }
  }
}

@function calculateZ($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name)) + 1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

$z-indexes: (
        "outdated-browser",
        "modal",
        "page-header",
        "page-wrapper",
        "page-footer"
);
